import { chartLine } from "chart";
import { getData } from "csv";
import { functions } from "methods";
import { IInput, IModel, IDataset } from "types";

export function getCategories(
	categoriesToSelect: string[],
	input: Array<IInput>
) {
	return Object.values(input)
		.filter((line) => categoriesToSelect.includes(line.category))
		.reduce((categories, current) => {
			if (!categories.includes(current.subcategory))
				categories.push(current.subcategory);
			return categories;
		}, []);
}

function processing(
	csvRawData: string,
	modelToGenerate: string,
	models: {
		[key: string]: IModel;
	},
	colors: string[],
	separator = ","
) {
	// Convert the RAW CSV DATA to JSON format
	const json: IInput[] = getData(csvRawData, separator);
	// Get the model definition (can be change in the defaults.ts or in the settings)
	const model: IModel = models[modelToGenerate];

	if (!functions[model.dataSource])
		throw new Error("The specified `model` does not exists");

	// Extract the keys generated by the split function, defined in the model and it requires the JSON format data.
	const labels = Object.keys(
		functions[model.dataSource](json, model.dataSourceKey)
	).map((label) => (label && label !== "" ? label : "_NO_LABEL_"));
	
	// For each entry, we keep only the one required by the model. It is filtered by the category.
	const categories = getCategories(model.categories, json);
	// Generator function
	const output: IDataset = functions[model.output]({
		categoriesToSelect: model.categories,
		input: functions[model.dataSource](json, model.dataSourceKey),
		labels,
		categories,
		colors,
	});

	return chartLine(
		output,
		model.chartLabelType,
		model.suffix,
		model.beginAtZero
	);
}

export default processing;
